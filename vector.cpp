/*****************************************************************************
ベクトルを使うのに便利なファイル[vector.cpp]
Aythor	: 上野　匠
Data	: 2017_01_12
=============================================================================
Updata

*****************************************************************************/

//////////////////////////////////////////////////////////////////////////////
//ヘッダーファイルインクルード
//////////////////////////////////////////////////////////////////////////////
#include "main.h"
#include <math.h>
#include "vector.h"

//////////////////////////////////////////////////////////////////////////////
//定数定義
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//プロトタイプ宣言
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//関数名	: getLenVector
//返り値	: 
//説明		: ベクトルの長さ取得
//////////////////////////////////////////////////////////////////////////////
double	getLenVector	( D3DXVECTOR3 vec )
{
	return sqrt(vec.x * vec.x + vec.y * vec.y + vec.z * vec.z);
}

//////////////////////////////////////////////////////////////////////////////
//関数名	: getInnerProduct
//返り値	: 
//説明		: ベクトルの内積取得
//////////////////////////////////////////////////////////////////////////////
double	getInnerProduct	( D3DXVECTOR3 vec1, D3DXVECTOR3 vec2 )
{
	return vec1.x * vec2.x + vec1.y * vec2.y + vec1.z * vec2.z;
}

//////////////////////////////////////////////////////////////////////////////
//関数名	: getAngleVector
//返り値	: 
//説明		: なす角の取得
//////////////////////////////////////////////////////////////////////////////
double	getAngleVector	( D3DXVECTOR3 vec1, D3DXVECTOR3 vec2 )
{
	//変数宣言
	double	len[2];	//ベクトルの長さ
	double	cos;	//Cos角

	len[0]	=	getLenVector(vec1);
	len[1]	=	getLenVector(vec2);

	cos = getInnerProduct(vec1, vec2) / (len[0] * len[1]);

	return	acos(cos);
}

//////////////////////////////////////////////////////////////////////////////
//関数名	: getPosLen
//返り値	: 
//説明		: 二点間距離取得
//////////////////////////////////////////////////////////////////////////////
double	getPosLen	( D3DXVECTOR3 line1, D3DXVECTOR3 line2 )
{
	return sqrt((line2.x - line1.x) * (line2.x - line1.x) + (line2.y - line1.y) * (line2.y - line1.y) + (line2.z - line1.z) * (line2.z - line1.z));
}

//////////////////////////////////////////////////////////////////////////////
//関数名	: getPosLen
//返り値	: 
//説明		: 正規化された壁ずりベクトル計算
//////////////////////////////////////////////////////////////////////////////
D3DXVECTOR3	wallScratchVector	(D3DXVECTOR3 wallNormal, D3DXVECTOR3 moveVec)
{
	//変数宣言
	D3DXVECTOR3		normal;		//法線ベクトル
	float			dot;		//壁法線ベクトルと進行ベクトルの内積

	//法線ベクトル正規化
	D3DXVec3Normalize(&normal, &wallNormal);

	//壁と進行ベクトルの内積計算
	dot = D3DXVec3Dot(&wallNormal, &moveVec);

	//壁ずりベクトル計算
	normal *= dot;
	normal = moveVec - normal;
	D3DXVec3Normalize(&normal, &normal);

	return normal;
}

//////////////////////////////////////////////////////////////////////////////
//関数名	: getCrossProduct
//返り値	: 外積
//説明		: ベクトルの外積取得
//////////////////////////////////////////////////////////////////////////////
D3DXVECTOR3	getCrossProduct	( D3DXVECTOR3 vec1, D3DXVECTOR3 vec2 )
{
	//変数宣言
	D3DXVECTOR3	work;		//作業用変数

	//外積計算
	work.x = vec1.y * vec2.z - vec1.z * vec2.y;
	work.y = vec1.z * vec2.x - vec1.x * vec2.z;
	work.z = vec1.x * vec2.y - vec1.y * vec2.x;

	return work;
}

//////////////////////////////////////////////////////////////////////////////
//関数名	:	getNormalVec
//
//引数		:	point	ベクトルの始点
//				vec1	終点1
//				vec2	終点2
//
//返り値	:	法線ベクトル
//説明		:	法線ベクトル取得
//////////////////////////////////////////////////////////////////////////////
D3DXVECTOR3	getNormalVec	( D3DXVECTOR3 point, D3DXVECTOR3 vec1, D3DXVECTOR3 vec2 )
{
	//変数宣言
	D3DXVECTOR3		work;		//作業用変数
	double			scale;		//大きさ

	//ベクトルを原点に合わせる
	vec1 = vec1 - point;
	vec2 = vec2 - point;

	//外積を求める
	work = getCrossProduct(vec1, vec2);

	//vec1とvec2の大きさを求める
	scale = sqrt(work.x * work.x + work.y * work.y + work.z * work.z);

	//外積を正規化
	work *= scale;

	return work;
}

//////////////////////////////////////////////////////////////////////////////
//関数名	:	vec3Normalize
//
//引数		:	point	ベクトルの始点
//				vec1	終点1
//				vec2	終点2
//
//返り値	:	法線ベクトル
//説明		:	法線ベクトル取得
//////////////////////////////////////////////////////////////////////////////
D3DXVECTOR3	vec3Normalize	( D3DXVECTOR3 vec )
{
	//変数宣言
	double		len;

	len = sqrt(vec.x * vec.x + vec.y * vec.y + vec.z * vec.z);

	vec *= 1.0f / len;

	return vec;
}
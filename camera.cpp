/*****************************************************************************
メッセージBOX表示処理[main.cpp]
Aythor	: 上野　匠
Data	: 2016_05_17
=============================================================================
Updata

*****************************************************************************/

//////////////////////////////////////////////////////////////////////////////
//ヘッダーファイルインクルード
//////////////////////////////////////////////////////////////////////////////
#include	"main.h"
#include	"input.h"
#include	"camera.h"

//////////////////////////////////////////////////////////////////////////////
//定数定義
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//構造体定義
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//プロトタイプ宣言
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//グローバル変数
//////////////////////////////////////////////////////////////////////////////
CAMERA	camera;

//////////////////////////////////////////////////////////////////////////////
//関数名	: initCamera
//返り値	: 
//説明		: 更新処理
//////////////////////////////////////////////////////////////////////////////
void	initCamera	(void)
{
	camera.vecUp	=	D3DXVECTOR3(0.f, 0.1f, 0.f);
	camera.angleYZ	=	0.f;
	camera.angleXZ	=	0.f;
	camera.atAngle	=	0.f;
	camera.len		=	-30.f;

	camera.posAt	=	D3DXVECTOR3(
		-camera.len * sin(camera.angleXZ),
		15.f,
		-camera.len * cos(camera.angleXZ));

	camera.posEye	=	D3DXVECTOR3(
		0.f,
		15.f,
		0.f);

	camera.moveVec	=	camera.posAt - camera.posEye;
}

//////////////////////////////////////////////////////////////////////////////
//関数名	: updateCamera
//返り値	: 
//説明		: 更新処理
//////////////////////////////////////////////////////////////////////////////
void updateCamera ( void )
{
	//変数宣言
	LPDIRECT3DDEVICE9	pDev = getDevice();

	fmod(camera.angleXZ, PI);
	fmod(camera.atAngle, PI);

	camera.moveVec	=	camera.posAt - camera.posEye;
	D3DXVec3Normalize(&camera.moveVec, &camera.moveVec);

	//カメラ行列の設定
	D3DXMatrixLookAtLH(&camera.view, &camera.posEye, &camera.posAt, &camera.vecUp);
	pDev->SetTransform(D3DTS_VIEW, &camera.view);

	//プロジェクション行列の設定
	D3DXMatrixPerspectiveFovLH(&camera.proj,
		D3DX_PI / 3.f,										//視野角
		(float)(SCREEN_WIDTH / SCREEN_HEIGHT),				//アスペクト比
		1.f,												//near
		1000.f);											//far

	pDev->SetTransform(D3DTS_PROJECTION, &camera.proj);		//行列設定
}

//////////////////////////////////////////////////////////////////////////////
//関数名	: getViewMtx
//返り値	: 
//説明		: ビュー行列取得
//////////////////////////////////////////////////////////////////////////////
D3DXMATRIX getViewMtx ( void )
{
	return	camera.view;
}

//////////////////////////////////////////////////////////////////////////////
//関数名	: getCameraPos
//返り値	: 
//説明		: カメラ座標取得
//////////////////////////////////////////////////////////////////////////////
D3DXVECTOR3 getCameraPos ( void )
{
	return camera.posEye;
}

//////////////////////////////////////////////////////////////////////////////
//関数名	: getCamera
//返り値	: 
//説明		: カメラのポインタ取得
//////////////////////////////////////////////////////////////////////////////
CAMERA *getCamera ( void )
{
	return &camera;
}
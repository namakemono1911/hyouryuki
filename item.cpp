/*****************************************************************************
所持アイテム
Aythor	: 上野　匠
Data	: 2017_01_17
=============================================================================
Updata

*****************************************************************************/
//////////////////////////////////////////////////////////////////////////////
//インクルード
//////////////////////////////////////////////////////////////////////////////
#include "main.h"
#include "item.h"

//////////////////////////////////////////////////////////////////////////////
//定数定義
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//構造体定義
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//プロトタイプ宣言
//////////////////////////////////////////////////////////////////////////////
ITEM	item[ITEM_LIST_MAX];

//////////////////////////////////////////////////////////////////////////////
//グローバル変数
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//関数名	: initItem
//返り値	: 
//説明		: アイテム初期化
//////////////////////////////////////////////////////////////////////////////
HRESULT	initItem	( void )
{
	//変数宣言
	int		i;		//loop

	for(i = 0; i < ITEM_LIST_MAX; i++)
	{
		item[i].num		=	0;
	}

	return S_OK;
}

//////////////////////////////////////////////////////////////////////////////
//関数名	: uninitItem
//返り値	: 
//説明		: アイテム終了
//////////////////////////////////////////////////////////////////////////////
void	uninitItem	( void )
{

}

//////////////////////////////////////////////////////////////////////////////
//関数名	: updateItem
//返り値	: 
//説明		: ポリゴン初期化
//////////////////////////////////////////////////////////////////////////////
void	updateItem	( void )
{

}

//////////////////////////////////////////////////////////////////////////////
//関数名	: getItem
//返り値	: 
//説明		: アイテム構造体のポインタ取得
//////////////////////////////////////////////////////////////////////////////
ITEM	*getItem	( int num )
{
	return &item[num];
}

//////////////////////////////////////////////////////////////////////////////
//関数名	: addItemNum
//返り値	: 
//説明		: アイテム数加算
//////////////////////////////////////////////////////////////////////////////
void	addItemNum	( int num, int addValue )
{
	item[num].num += addValue;
}

//////////////////////////////////////////////////////////////////////////////
//関数名	: subItemNum
//返り値	: 
//説明		: アイテム数減算
//////////////////////////////////////////////////////////////////////////////
void	subItemNum	( int num, int subValue )
{
	item[num].num -= subValue;
}

//////////////////////////////////////////////////////////////////////////////
//関数名	: addItemLife
//返り値	: 
//説明		: 耐久値加算
//////////////////////////////////////////////////////////////////////////////
void	addItemLife	( int num, int addValue )
{
	item[num].life += addValue;
}

//////////////////////////////////////////////////////////////////////////////
//関数名	: subItemLife
//返り値	: 
//説明		: 耐久値減算
//////////////////////////////////////////////////////////////////////////////
void	subItemLife	( int num, int subValue )
{
	item[num].life -= subValue;
}